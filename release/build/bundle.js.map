{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/color-selector/helpers/color-picker-helpers.ts","../../src/color-selector/helpers/color-space-helpers.ts","../../node_modules/svelte/store/index.mjs","../../src/color-selector/models/color-selection-mode.ts","../../src/color-selector/color-selector.store.ts","../../src/color-selector/helpers/math-helpers.ts","../../src/color-selector/NuuColorPicker.svelte","../../src/color-selector/helpers/color-parsing.ts","../../src/color-selector/NuuColorInput.svelte","../../src/color-selector/NuuSelectedColor.svelte","../../src/color-selector/NuuColorConfirm.svelte","../../src/color-selector/NuuColorSelector.svelte","../../src/color-swatch/ColorSwatch.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export function drawRGBStrip(canvas) {\r\n    const context = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    // This gradient makes hue go from 360° -> 0°\r\n    const gradient = context.createLinearGradient(0, 0, 0, height);\r\n    gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');\r\n    gradient.addColorStop(1 / 6, 'rgba(255, 0, 255, 1)');\r\n    gradient.addColorStop(2 / 6, 'rgba(0, 0, 255, 1)');\r\n    gradient.addColorStop(3 / 6, 'rgba(0, 255, 255, 1)');\r\n    gradient.addColorStop(4 / 6, 'rgba(0, 255, 0, 1)');\r\n    gradient.addColorStop(5 / 6, 'rgba(255, 255, 0, 1)');\r\n    gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');\r\n    context.fillStyle = gradient;\r\n    context.fillRect(0, 0, width, height);\r\n    // Because gradient.addColorStop doesn't always add the final colour we manually add the last color\r\n    // So without this the final colour might be 255, 0, 3\r\n    context.fillStyle = 'rgb(255, 0, 0)';\r\n    context.fillRect(0, height - 1, width, 1);\r\n}\r\n// Modified source: https://codepen.io/pizza3/pen/BVzYNP\r\n/**\r\n *\r\n * @param color Example input: rgba(0, 0, 0, 1)\r\n */\r\nexport function drawHSVBlock(color, canvas, context, gradients) {\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    context.fillStyle = color;\r\n    context.fillRect(0, 0, width, height);\r\n    context.fillStyle = gradients.xGradient;\r\n    context.fillRect(0, 0, width, height);\r\n    context.fillStyle = gradients.yGradient;\r\n    context.fillRect(0, 0, width, height);\r\n}\r\nexport function createHSVGradients(width, height, context) {\r\n    // Draw a fully white gradient from left side to the right that will lose opacity.\r\n    // So on the right side it's the full color.\r\n    const whiteGradient = context.createLinearGradient(0, 0, width, 0);\r\n    whiteGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\r\n    whiteGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n    // Draw a fully black gradient from bottom to top.\r\n    // So that on the bottom it's fully black and at the top it's the full color.\r\n    const blackGradient = context.createLinearGradient(0, 0, 0, height);\r\n    blackGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\r\n    blackGradient.addColorStop(1, 'rgba(0, 0, 0, 1)');\r\n    return {\r\n        xGradient: whiteGradient,\r\n        yGradient: blackGradient,\r\n    };\r\n}\r\nexport function drawAlphaBackground(width, height, context) {\r\n    const darkColor = 'rgb(192, 192, 192)';\r\n    const lightColor = 'rgb(255, 255, 255)';\r\n    // Size in pixels\r\n    const size = 8;\r\n    const doubleSize = size * 2;\r\n    context.fillStyle = darkColor;\r\n    // Fill the whole draw area in dark\r\n    context.fillRect(0, 0, width, height);\r\n    context.fillStyle = lightColor;\r\n    // Then we draw the tiles 2 blocks at a time like this repeated over x axis then y axis.\r\n    // * l\r\n    // l *\r\n    // * is where the dark tile would have been but it's already dark because we filled the whole canvas.\r\n    for (let y = 0; y < height; y += doubleSize) {\r\n        for (let x = 0; x < width; x += doubleSize) {\r\n            context.fillRect(x + size, y, size, size);\r\n            context.fillRect(x, y + size, size, size);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Convert RGB to rgb(red, green, blue)\r\n * @param red Range: [0, 255]\r\n * @param green Range: [0, 255]\r\n * @param blue Range: [0, 255]\r\n */\r\nexport function rgbToCSS(red, green, blue) {\r\n    return `rgb(${red}, ${green}, ${blue})`;\r\n}\r\n/**\r\n * Convert RGBA to rgba(red, green, blue, alpha)\r\n * @param red Range: [0, 255]\r\n * @param green Range: [0, 255]\r\n * @param blue Range: [0, 255]\r\n * @param alpha Range: [0, 1]\r\n */\r\nexport function rgbaToCSS(red, green, blue, alpha) {\r\n    return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\r\n}\r\nexport function hsvaToRGBAToCSS(hue, saturation, value, alpha) {\r\n    const rgb = hsvToRGB(hue, saturation, value);\r\n    return rgbaToCSS(rgb.red, rgb.green, rgb.blue, alpha);\r\n}\r\n/**\r\n * Converts HSV to HSL and then to CSS.\r\n * @param hue Range: [0°, 360°]\r\n * @param saturation Range: [0, 1]\r\n * @param value Range: [0, 1]\r\n */\r\nexport function hsvToCSS(hue, saturation, value) {\r\n    let hsl = hsvToHSL(hue, saturation, value);\r\n    hsl = getViewHSL(hsl.hue, hsl.saturation, hsl.lightness);\r\n    return `hsl(${hsl.hue}, ${hsl.saturation}%, ${hsl.lightness}%)`;\r\n}\r\n/**\r\n * Convert HSVA to HSLA\r\n * @param hue\r\n * @param saturation\r\n * @param value\r\n * @param alpha\r\n */\r\nexport function hsvaToCSS(hue, saturation, value, alpha) {\r\n    let hsl = hsvToHSL(hue, saturation, value);\r\n    hsl = getViewHSL(hsl.hue, hsl.saturation, hsl.lightness);\r\n    return `hsla(${hsl.hue}, ${hsl.saturation}%, ${hsl.lightness}%, ${alpha})`;\r\n}\r\n/**\r\n * Convert RGB to Hex\r\n * @param red Range: [0, 255]\r\n * @param blue Range: [0, 255]\r\n * @param green Range: [0, 255]\r\n */\r\nexport function rgbToHex(red, green, blue) {\r\n    let hexRed = componentToHex(red);\r\n    let hexGreen = componentToHex(green);\r\n    let hexBlue = componentToHex(blue);\r\n    return `#${hexRed}${hexGreen}${hexBlue}`;\r\n}\r\n/**\r\n * Convert RGBA to HEX.\r\n * @param red Range: [0, 255]\r\n * @param blue Range: [0, 255]\r\n * @param green Range: [0, 255]\r\n * @param alpha Range: [0, 1]\r\n */\r\nexport function rgbaToHex(red, green, blue, alpha, truncateWhenFullAlpha) {\r\n    // We floor the alpha rounding so that if it's 0.99 it's still 245.\r\n    alpha = Math.floor(alpha * 255);\r\n    let hex = rgbToHex(red, green, blue);\r\n    if (!truncateWhenFullAlpha || alpha !== 255) {\r\n        const alphaHex = componentToHex(alpha);\r\n        hex += alphaHex;\r\n    }\r\n    return hex;\r\n}\r\n/**\r\n * Convert a color component from 0 -> 255 into hex.\r\n * @param color Range: [0, 255]\r\n */\r\nexport function componentToHex(color) {\r\n    let hex = color.toString(16);\r\n    return hex.length === 1 ? '0' + hex : hex;\r\n}\r\n// Formula: https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB\r\n// Formula for hue: // Formula: https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma\r\n/**\r\n * Convert RGB to HSV\r\n * @param red Range: [0, 255]\r\n * @param blue Range: [0, 255]\r\n * @param green Range: [0, 255]\r\n */\r\nexport function rgbToHSV(red, green, blue) {\r\n    const r = red / 255;\r\n    const g = green / 255;\r\n    const b = blue / 255;\r\n    const value = Math.max(r, g, b);\r\n    const xMin = Math.min(r, g, b);\r\n    const chroma = value - xMin;\r\n    let saturation = 0;\r\n    if (value !== 0) {\r\n        saturation = chroma / value;\r\n    }\r\n    let hue = 0;\r\n    if (chroma !== 0) {\r\n        switch (value) {\r\n            case 0:\r\n                break;\r\n            case r:\r\n                hue = ((g - b) / chroma) % 6;\r\n                break;\r\n            case g:\r\n                hue = ((b - r) / chroma) + 2;\r\n                break;\r\n            case b:\r\n                hue = ((r - g) / chroma) + 4;\r\n                break;\r\n        }\r\n    }\r\n    hue *= 60;\r\n    if (hue < 0) {\r\n        hue += 360;\r\n    }\r\n    hue = Math.round(hue);\r\n    return {\r\n        hue,\r\n        saturation,\r\n        value,\r\n    };\r\n}\r\n// Formula: https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB\r\n/**\r\n * Convert HSV values to RGB values.\r\n * @param hue Range: [0°, 360°]\r\n * @param saturation Range: [0, 1]\r\n * @param value Range: [0, 1]\r\n */\r\nexport function hsvToRGB(hue, saturation, value) {\r\n    let red = 0;\r\n    let green = 0;\r\n    let blue = 0;\r\n    let chroma = saturation * value;\r\n    const deltaHue = hue / 60;\r\n    let x = chroma * (1 - Math.abs((deltaHue % 2) - 1));\r\n    // 5 < H' <= 6\r\n    if (deltaHue > 5) {\r\n        red = chroma;\r\n        blue = x;\r\n        // 4 < H' <= 5\r\n    }\r\n    else if (deltaHue > 4) {\r\n        red = x;\r\n        blue = chroma;\r\n        // 3 < H' <= 4\r\n    }\r\n    else if (deltaHue > 3) {\r\n        green = x;\r\n        blue = chroma;\r\n        // 2 < H' <= 3\r\n    }\r\n    else if (deltaHue > 2) {\r\n        green = chroma;\r\n        blue = x;\r\n        // 1 < H' <= 2\r\n    }\r\n    else if (deltaHue > 1) {\r\n        red = x;\r\n        green = chroma;\r\n        // 0 <= H' <= 1\r\n    }\r\n    else {\r\n        red = chroma;\r\n        green = x;\r\n    }\r\n    const m = value - chroma;\r\n    red = Math.round((red + m) * 255);\r\n    green = Math.round((green + m) * 255);\r\n    blue = Math.round((blue + m) * 255);\r\n    return {\r\n        red,\r\n        green,\r\n        blue,\r\n    };\r\n}\r\n// Formula: https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL\r\n/**\r\n * Convert HSV to HSL.\r\n * @param hue Range: [0°, 360°]\r\n * @param saturation Range: [0, 1]\r\n * @param value Range: [0, 1]\r\n */\r\nexport function hsvToHSL(hue, saturation, value) {\r\n    const lightness = value * (1 - saturation / 2);\r\n    // sv = 0 if value == 0\r\n    let sl = 0;\r\n    // Division by 0 when lightness == 0 or 1\r\n    if (lightness !== 0 && lightness !== 1) {\r\n        sl = (value - lightness) / Math.min(lightness, 1 - lightness);\r\n    }\r\n    return {\r\n        // Hl = Hv\r\n        hue,\r\n        saturation: sl,\r\n        lightness,\r\n    };\r\n}\r\n// Formula: https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV\r\n/**\r\n * Convert HSL to HSV.\r\n * @param hue Range: [0°, 360°]\r\n * @param saturation Range: [0, 1]\r\n * @param lightness Range: [0, 1]\r\n */\r\nexport function hslToHSV(hue, saturation, lightness) {\r\n    const value = lightness + saturation * Math.min(lightness, 1 - lightness);\r\n    let sv = 0;\r\n    if (value !== 0) {\r\n        sv = 2 * (1 - lightness / value);\r\n    }\r\n    return {\r\n        // Hv = Hl\r\n        hue,\r\n        saturation: sv,\r\n        value,\r\n    };\r\n}\r\n/**\r\n * Rounds and multiplies saturation & lightness so it's in the range of 0 -> 100.\r\n * @param hue Range: [0°, 360°]\r\n * @param saturation Range: [0, 1]\r\n * @param lightness Range: [0, 1]\r\n */\r\nexport function getViewHSL(hue, saturation, lightness) {\r\n    return {\r\n        hue,\r\n        saturation: Math.round(saturation * 100),\r\n        lightness: Math.round(lightness * 100),\r\n    };\r\n}\r\nexport function roundAlpha(alpha) {\r\n    // 3 decimal precision for alpha,  1 / 255 = 0.0039\r\n    // Also round to 3 decimal precision or it could look like 0.12381624.\r\n    return Math.floor(alpha * 1000) / 1000;\r\n}\r\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export var ColorSelectionMode;\r\n(function (ColorSelectionMode) {\r\n    ColorSelectionMode[ColorSelectionMode[\"HSV\"] = 0] = \"HSV\";\r\n    ColorSelectionMode[ColorSelectionMode[\"HSL\"] = 1] = \"HSL\";\r\n})(ColorSelectionMode || (ColorSelectionMode = {}));\r\n","import { writable } from 'svelte/store';\r\nimport { ColorSelectionMode } from './models/color-selection-mode';\r\n// TODO: All hell breaks loose if changing the colour space! Lots of refactoring!\r\nexport const selectionMode = writable(ColorSelectionMode.HSV);\r\n/**\r\n * Range: [0, 1]\r\n */\r\nexport const alpha = writable(1);\r\n/**\r\n * Range: [0°, 360°]\r\n */\r\nexport const hue = writable(360);\r\n/**\r\n * Range: [0, 1]\r\n */\r\nexport const saturation = writable(1);\r\n// TODO: Rename to brightness to not compete naming with \"value\"?\r\n/**\r\n * Range: [0, 1]\r\n */\r\nexport const value = writable(1);\r\n/**\r\n * Create a custom store to handle the state if the user is currently dragging.\r\n */\r\nfunction createIsDraggingColor() {\r\n    let interactingCounts = 0;\r\n    const { subscribe, set } = writable(false);\r\n    return {\r\n        subscribe,\r\n        addDragging: () => {\r\n            interactingCounts++;\r\n            if (interactingCounts === 1) {\r\n                set(true);\r\n            }\r\n        },\r\n        removeDragging: () => {\r\n            interactingCounts--;\r\n            if (interactingCounts < 0) {\r\n                console.log('nuu color picker: too many draggers were removed!');\r\n                interactingCounts = 0;\r\n            }\r\n            if (interactingCounts === 0) {\r\n                set(false);\r\n            }\r\n        },\r\n    };\r\n}\r\nexport const isDraggingColor = createIsDraggingColor();\r\n","/**\r\n * Clamp value between min & max.\r\n */\r\nexport function clamp(value, min, max) {\r\n    return Math.min(Math.max(value, min), max);\r\n}\r\n","<script lang=\"ts\">\r\n  import { onDestroy, onMount } from 'svelte';\r\n  import { drawRGBStrip, drawHSVBlock, createHSVGradients } from './helpers/color-picker-helpers';\r\n  import { hsvaToRGBAToCSS } from './helpers/color-space-helpers';\r\n\r\n  import { hue, saturation, value, isDraggingColor } from './color-selector.store';\r\n  import type { Unsubscriber } from 'svelte/store';\r\n  import { clamp } from './helpers/math-helpers';\r\n  import type { ColorGradients } from './models/colors/color-gradients';\r\n\r\n  const svCanvasSize: number = 192;\r\n  // We get the height from the saturation & value canvas size.\r\n  const rgbCanvasWidth: number = 20;\r\n\r\n  let svCanvas: HTMLCanvasElement;\r\n  let svContext: CanvasRenderingContext2D | undefined;\r\n  let svGradients: ColorGradients;\r\n  let svIndicator: HTMLElement | undefined;\r\n  let rgbCanvas: HTMLCanvasElement;\r\n  // Indicator to transform up & down based on color!\r\n  let rgbPointyIndicator: HTMLElement | undefined;\r\n\r\n  let svPointerDown: boolean = false;\r\n  let rgbPointerDown: boolean = false;\r\n\r\n  const subscriptions: Unsubscriber[] = [];\r\n  // Temporary saturation blocker, the event system should be rewritten to be hsva.subscribe() instead of each individual component.\r\n  // but this halves the amount of DOM repaints.\r\n  let tempSaturationBlocker: boolean = false;\r\n\r\n  onMount((): void => {\r\n    initEvents();\r\n\r\n    svContext = svCanvas.getContext('2d');\r\n    svGradients = createHSVGradients(svCanvas.width, svCanvas.height, svContext);\r\n\r\n    drawRGBStrip(rgbCanvas);\r\n    drawHSVBlock(hsvaToRGBAToCSS($hue, 1, 1, 1), svCanvas, svContext, svGradients);\r\n\r\n    subscriptions.push(\r\n      hue.subscribe(h => {\r\n        const rgba = hsvaToRGBAToCSS(h, 1, 1, 1);\r\n        drawHSVBlock(rgba, svCanvas, svContext, svGradients);\r\n        const rgbIndicatorTop = (((360 - h) / 360) * rgbCanvas.offsetHeight);\r\n        rgbPointyIndicator.style.transform = `translate(-0.5px, ${rgbIndicatorTop}px)`;\r\n        rgbPointyIndicator.style.backgroundColor = rgba;\r\n      }),\r\n      saturation.subscribe(s => {\r\n        if (tempSaturationBlocker) {\r\n          return;\r\n        }\r\n\r\n        svIndicator.style.transform = getSVIndicatorTransform(s, $value);\r\n      }),\r\n      value.subscribe(v => {\r\n        svIndicator.style.transform = getSVIndicatorTransform($saturation, v);\r\n      }),\r\n    );\r\n  });\r\n\r\n  onDestroy((): void => {\r\n    for (const subscription of subscriptions) {\r\n      subscription();\r\n    }\r\n\r\n    removeEvents();\r\n  });\r\n\r\n  function initEvents(): void {\r\n    // TODO: Might want to add an option to confine this only to the color picker in case the user has an app that eats events.\r\n    window.addEventListener('pointerleave', onPointerLeave);\r\n    window.addEventListener('pointerup', onPointerUp);\r\n    window.addEventListener('pointermove', onPointerMove);\r\n  }\r\n\r\n  function removeEvents(): void {\r\n    window.removeEventListener('pointerleave', onPointerLeave);\r\n    window.removeEventListener('pointerup', onPointerUp);\r\n    window.removeEventListener('pointermove', onPointerMove);\r\n  }\r\n\r\n  function onPointerMove(event: PointerEvent): void {\r\n    onSVPointerMove(event);\r\n    onRGBPointerMove(event);\r\n  }\r\n\r\n  function onPointerUp(): void {\r\n    if (svPointerDown) {\r\n      isDraggingColor.removeDragging();\r\n    }\r\n    if (rgbPointerDown) {\r\n      isDraggingColor.removeDragging();\r\n    }\r\n\r\n    svPointerDown = false;\r\n    rgbPointerDown = false;\r\n  }\r\n\r\n  function onPointerLeave(): void {\r\n    onPointerUp();\r\n  }\r\n\r\n  function onSVPointerDown(event: PointerEvent): void {\r\n    svPointerDown = true;\r\n    onSVPointerMove(event);\r\n    isDraggingColor.addDragging();\r\n  }\r\n\r\n  function onSVPointerMove(event: PointerEvent): void {\r\n    if (!svPointerDown) {\r\n      return;\r\n    }\r\n\r\n    const bounds = svCanvas.getBoundingClientRect();\r\n    const x = clamp(event.clientX - bounds.left, 0, svCanvas.offsetWidth);\r\n    const y = clamp(event.clientY - bounds.top, 0, svCanvas.offsetHeight);\r\n\r\n    const s = x / svCanvas.offsetWidth;\r\n    const v = 1 - (y / svCanvas.offsetHeight);\r\n\r\n    // If v === $value then saturation would never update because the event is never fired that value has changed.\r\n    // A hack for a hack to improve performance!!\r\n    tempSaturationBlocker = v !== $value;\r\n    saturation.set(s);\r\n    value.set(v);\r\n    tempSaturationBlocker = false;\r\n  }\r\n\r\n  function onRGBPointerDown(event: PointerEvent): void {\r\n    rgbPointerDown = true;\r\n    onRGBPointerMove(event);\r\n    isDraggingColor.addDragging();\r\n  }\r\n\r\n  function onRGBPointerMove(event: PointerEvent): void {\r\n    if (!rgbPointerDown) {\r\n      return;\r\n    }\r\n\r\n    const bounds = rgbCanvas.getBoundingClientRect();\r\n    // Get y-pos within the canvas.\r\n    const y = clamp(event.clientY - bounds.top, 0, rgbCanvas.offsetHeight);\r\n    // Because the top is 360 degrees we want the top to be 360 degrees and bottom 0 degrees.\r\n    // So 360 - value!\r\n    const h = 360 - Math.round(((y / rgbCanvas.offsetHeight) * 360));\r\n    hue.set(h);\r\n  }\r\n\r\n  function getSVIndicatorTransform(saturation: number, value: number): string {\r\n    const x = (saturation * svCanvas.offsetWidth) - svIndicator.offsetWidth * 0.5;\r\n    const y = ((1 - value) * svCanvas.offsetHeight) - svIndicator.offsetHeight * 0.5;\r\n    const transform = `translate(${x}px, ${y}px)`;\r\n    return transform;\r\n  }\r\n</script>\r\n<style lang=\"scss\">\r\n$circle-radius: 10px;\r\n$outer-color: rgba(0, 0, 0, 0.67);\r\n$inner-color: rgba(255, 255, 255, 0.8);\r\n\r\n$rgb-margin-left: 8px;\r\n$rgb-indicator-outer-bg: #0d0d0d;\r\n$rgb-indicator-inner-bg: seashell;\r\n\r\n.nuu-color-picker {\r\n  display: flex;\r\n}\r\n\r\n.color-picker-sv-container,\r\n.color-picker-rgb-container {\r\n  position: relative;\r\n  display: flex;\r\n}\r\n\r\n.color-picker-rgb-container {\r\n  margin-left: $rgb-margin-left;\r\n}\r\n\r\n.color-picker-circle-indicator,\r\n.color-picker-inner-circle,\r\n.color-picker-rgb-slider,\r\n.color-picker-rgb-slider-inner {\r\n  position: absolute;\r\n  // We only listen to the\r\n  pointer-events: none;\r\n}\r\n\r\n.color-picker-saturation-lightness,\r\n.color-picker-rgb {\r\n  cursor: pointer;\r\n}\r\n\r\n.color-picker-circle-indicator {\r\n  width: $circle-radius;\r\n  height: $circle-radius;\r\n  border: 1px solid $outer-color;\r\n  border-radius: $circle-radius;\r\n}\r\n\r\n.color-picker-inner-circle {\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid $inner-color;\r\n  border-radius: $circle-radius;\r\n}\r\n\r\n.color-picker-rgb-slider {\r\n  width: 25px;\r\n  height: 25px;\r\n\r\n  // Set the top negative to half height so the transform that will be applied can just be the position!\r\n  top: -12.5px;\r\n  left: -2.5px;\r\n\r\n  pointer-events: none;\r\n  border: 2px solid $outer-color;\r\n  border-radius: 12.5px;\r\n}\r\n\r\n.color-picker-rgb-slider-inner {\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid $inner-color;\r\n  border-radius: 12.5px;\r\n}\r\n\r\n</style>\r\n<div class=\"nuu-color-picker\">\r\n    <div class=\"color-picker-sv-container\">\r\n      <div bind:this={svIndicator} class=\"color-picker-circle-indicator\"><div class=\"color-picker-inner-circle\"></div></div>\r\n      <canvas bind:this={svCanvas} on:pointerdown={onSVPointerDown} width={svCanvasSize} height={svCanvasSize} class=\"color-picker-saturation-lightness\"></canvas>\r\n    </div>\r\n    <div class=\"color-picker-rgb-container\">\r\n      <div bind:this={rgbPointyIndicator} class=\"color-picker-rgb-slider\"><div class=\"color-picker-rgb-slider-inner\"></div></div>\r\n      <canvas bind:this={rgbCanvas} on:pointerdown={onRGBPointerDown} class=\"color-picker-rgb\" width={rgbCanvasWidth} height={svCanvasSize}></canvas>\r\n    </div>\r\n</div>\r\n","import { hslToHSV, rgbToHSV, roundAlpha } from './color-space-helpers';\r\nfunction parseAlpha(value) {\r\n    // Result[5] exists if the alpha channel existed otherwise parseFloat(undefined) == NaN.\r\n    let alpha = parseFloat(value);\r\n    alpha = !isNaN(alpha) ? alpha : 1;\r\n    alpha = roundAlpha(alpha);\r\n    return alpha;\r\n}\r\n/**\r\n * Parses the following inputs:\r\n * hsl(0, 100%, 100%)\r\n * hsl(0, 100%, 100%, 1) -- This is alpha for dummies like me, hsvaToCSS returned hsl() instead of hsla()!\r\n * hsla(0, 100%; 100, 1)\r\n */\r\nexport function parseHSLFromCSS(color, targetColor) {\r\n    const regex = /hsla?\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3}%?)\\s*,\\s*([0-9]{1,3}%?)\\s*(,\\s*([0-9]+(\\.+[0-9]+)?)\\s*)?\\)/m;\r\n    // Example groups:\r\n    // [0]: hsl(0, 50%, 75%, 0.1)\r\n    // [1]:\t0\r\n    // [2]: 50%\r\n    // [3]: 75%\r\n    // [4]: , 0.1\r\n    // [5]: 0.1\r\n    // [6]: .1\r\n    const result = color.match(regex);\r\n    if (!result) {\r\n        return;\r\n    }\r\n    const h = parseInt(result[1], 10);\r\n    const s = parseInt(result[2], 10) / 100;\r\n    const l = parseInt(result[3], 10) / 100;\r\n    const hsv = hslToHSV(h, s, l);\r\n    const a = parseAlpha(result[5]);\r\n    targetColor.hue = hsv.hue;\r\n    targetColor.saturation = hsv.saturation;\r\n    targetColor.value = hsv.value;\r\n    targetColor.alpha = a;\r\n}\r\n/**\r\n * Parses the following inputs:\r\n * rgb(255, 128, 0)\r\n * rgb(255, 128, 0, 0.2)\r\n * rgba(255, 128, 0, 0.2)\r\n */\r\nexport function parseRGBFromCSS(color, targetColor) {\r\n    const regex = /rgba?\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*(,\\s*([0-9]+(\\.[0-9])?)\\s*)?\\)/m;\r\n    // Example groups:\r\n    // [0]: rgba(255, 128, 0, 0.2)\r\n    // [1]:\t255\r\n    // [2]: 128\r\n    // [3]: 0\r\n    // [4]: , 0.2\r\n    // [5]: 0.2\r\n    // [6]: .2\r\n    const result = color.match(regex);\r\n    if (!result) {\r\n        return;\r\n    }\r\n    const r = parseInt(result[1], 10);\r\n    const g = parseInt(result[2], 10);\r\n    const b = parseInt(result[3], 10);\r\n    const hsv = rgbToHSV(r, g, b);\r\n    const a = parseAlpha(result[5]);\r\n    targetColor.hue = hsv.hue;\r\n    targetColor.saturation = hsv.saturation;\r\n    targetColor.value = hsv.value;\r\n    targetColor.alpha = a;\r\n}\r\n// Regex source: https://stackoverflow.com/a/53936623/2437350\r\n/**\r\n * Finds hex values for for #fff, #ffff, #ffffff, #ffffffff and without #.\r\n */\r\nexport const getHexValuesRegex = /^#?([a-fA-F0-9]{3,4}){1,2}$/;\r\n/**\r\n * Hex string to RGB.\r\n * Example of input: #abc, #aabbccdd (alpha), #aabbcc #aabbccdd (alpha)\r\n */\r\nexport function parseHexToRGBA(hex) {\r\n    const rgba = {\r\n        red: 0,\r\n        green: 0,\r\n        blue: 0,\r\n        alpha: 1,\r\n    };\r\n    if (!getHexValuesRegex.test(hex)) {\r\n        return rgba;\r\n    }\r\n    if (hex[0] === '#') {\r\n        hex = hex.substring(1);\r\n    }\r\n    if (hex.length === 3) {\r\n        extractHex(hex, rgba, 0, 0, 1, 1, 2, 2);\r\n    }\r\n    else if (hex.length === 6) {\r\n        extractHex(hex, rgba, 0, 1, 2, 3, 4, 5);\r\n    }\r\n    else if (hex.length === 4) {\r\n        extractHex(hex, rgba, 0, 0, 1, 1, 2, 2, 3, 3);\r\n    }\r\n    else if (hex.length === 8) {\r\n        extractHex(hex, rgba, 0, 1, 2, 3, 4, 5, 6, 7);\r\n    }\r\n    return rgba;\r\n}\r\nfunction extractHex(hex, rgba, r1, r2, g1, g2, b1, b2, a1 = -1, a2 = -1) {\r\n    rgba.red = parseInt(hex[r1] + hex[r2], 16);\r\n    rgba.green = parseInt(hex[g1] + hex[g2], 16);\r\n    rgba.blue = parseInt(hex[b1] + hex[b2], 16);\r\n    if (a1 > 0) {\r\n        const alpha = parseInt(hex[a1] + hex[a2], 16);\r\n        rgba.alpha = alpha / 255;\r\n    }\r\n}\r\n","<script lang=\"ts\">\r\n  import { alpha, hue, saturation, value } from './color-selector.store';\r\n  import { clamp } from './helpers/math-helpers';\r\n  import type { ColorRGB } from './models/colors/color-rgb';\r\n  import { onDestroy, onMount } from 'svelte';\r\n  import type { Unsubscriber } from 'svelte/store';\r\n  import { hsvToRGB, rgbaToHex, rgbToHex, rgbToHSV, roundAlpha } from './helpers/color-space-helpers';\r\n  import { parseHexToRGBA } from './helpers/color-parsing';\r\n\r\n  // If we update RGB colors or hex directly we don't want to HSV events to update the RGB values because it makes it impossible to edit values!\r\n  let blockRGBHexUpdate: boolean = false;\r\n  let rgb: ColorRGB = { red: 0, green: 0, blue: 0 };\r\n  let hex: string = \"\";\r\n  const subscriptions: Unsubscriber[] = [];\r\n\r\n  onMount((): void => {\r\n    updateRGBAndHex($hue, $saturation, $value);\r\n\r\n    subscriptions.push(\r\n      hue.subscribe((h): void => {\r\n        updateRGBAndHex(h, $saturation, $value);\r\n      }),\r\n      saturation.subscribe((s): void => {\r\n        updateRGBAndHex($hue, s, $value);\r\n      }),\r\n      value.subscribe((v): void => {\r\n        updateRGBAndHex($hue, $saturation, v);\r\n      }),\r\n    );\r\n  });\r\n\r\n  onDestroy((): void => {\r\n    for (const subscription of subscriptions) {\r\n      subscription();\r\n    }\r\n  });\r\n\r\n  function onHueChange(event: InputEvent): void {\r\n    const h = getAndSetRoundedInputValue(event);\r\n    const clampedValue = clampInput(h, 0, 360);\r\n    hue.set(clampedValue);\r\n  }\r\n\r\n  function onSaturationChange(event: InputEvent): void {\r\n    const s = getAndSetRoundedInputValue(event);\r\n    const clampedValue = clampInput(s, 0, 100) / 100;\r\n    saturation.set(clampedValue);\r\n  }\r\n\r\n  function onValueChange(event: InputEvent): void {\r\n    const s = getAndSetRoundedInputValue(event);\r\n    const clampedValue = clampInput(s, 0, 100) / 100;\r\n    value.set(clampedValue);\r\n  }\r\n\r\n  function onRedChange(event: InputEvent): void {\r\n    let red = getAndSetRoundedInputValue(event);\r\n    red = clampInput(red, 0, 255);\r\n    rgb.red = red;\r\n    updateHex(rgb.red, rgb.green, rgb.blue, $alpha);\r\n\r\n    updateHSV();\r\n  }\r\n\r\n  function onGreenChange(event: InputEvent): void {\r\n    let green = getAndSetRoundedInputValue(event);\r\n    green = clampInput(green, 0, 255);\r\n    rgb.green = green;\r\n    updateHex(rgb.red, rgb.green, rgb.blue, $alpha);\r\n\r\n    updateHSV();\r\n  }\r\n\r\n  function onBlueChange(event: InputEvent): void {\r\n    let blue = getAndSetRoundedInputValue(event);\r\n    blue = clampInput(blue, 0, 255);\r\n    rgb.blue = blue;\r\n    updateHex(rgb.red, rgb.green, rgb.blue, $alpha);\r\n\r\n    updateHSV();\r\n  }\r\n\r\n  function onAlphaChange(event: InputEvent): void {\r\n    const target = event.target as HTMLInputElement;\r\n    let a = parseFloat(target.value);\r\n    a = clampInput(a, 0, 1);\r\n\r\n    alpha.set(a);\r\n\r\n    updateHex(rgb.red, rgb.green, rgb.blue, a);\r\n  }\r\n\r\n  function onHexChange(event: InputEvent): void {\r\n    const element = event.target as HTMLInputElement;\r\n    const hex = element.value;\r\n    const rgba = parseHexToRGBA(hex);\r\n\r\n    rgb.red = rgba.red;\r\n    rgb.green = rgba.green;\r\n    rgb.blue = rgba.blue;\r\n\r\n    const a = roundAlpha(rgba.alpha);\r\n    alpha.set(a);\r\n\r\n    updateHSV();\r\n  }\r\n\r\n  function updateHSV(): void {\r\n    const oldHue = $hue;\r\n    const hsv = rgbToHSV(rgb.red, rgb.green, rgb.blue);\r\n\r\n    blockRGBHexUpdate = true;\r\n\r\n    // This is so that we don't jump with the hue if you are adjusting the RGB values and they all align\r\n    // Which makes it become a greyscale value and thus hue is calculated as 0.\r\n    if (rgb.red === rgb.green && rgb.red === rgb.blue && oldHue !== 0) {\r\n      hsv.hue = oldHue;\r\n    }\r\n\r\n    hue.set(hsv.hue);\r\n    saturation.set(hsv.saturation);\r\n    value.set(hsv.value);\r\n\r\n    blockRGBHexUpdate = false;\r\n  }\r\n\r\n  function updateRGBAndHex(h: number, s: number, v: number): void {\r\n    if (blockRGBHexUpdate) {\r\n      return;\r\n    }\r\n\r\n    const color = hsvToRGB(h, s, v);\r\n    rgb.red = color.red;\r\n    rgb.green = color.green;\r\n    rgb.blue = color.blue;\r\n\r\n    updateHex(rgb.red, rgb.green, rgb.blue, $alpha);\r\n  }\r\n\r\n  /**\r\n   * Update the hex and add alpha if less than 255.\r\n   * @param red Range: [0, 255]\r\n   * @param green Range: [0, 255]\r\n   * @param blue Range: [0, 255]\r\n   * @param a Range: [0, 1]\r\n   */\r\n  function updateHex(red: number, green: number, blue: number, a: number): void {\r\n    hex = rgbaToHex(red, green, blue, a, true);\r\n  }\r\n\r\n  function getAndSetRoundedInputValue(event: InputEvent): number {\r\n    const target = event.target as HTMLInputElement;\r\n    const value =  Math.round(parseFloat(target.value));\r\n    target.value = value.toString();\r\n    return value;\r\n  }\r\n\r\n  function clampInput(value: number, min: number, max: number): number {\r\n    if (!isFinite(value) || isNaN(value)) {\r\n      value = min;\r\n    }\r\n    return clamp(value, min, max);\r\n  }\r\n\r\n</script>\r\n<style lang=\"scss\">\r\n  // Can fit 0.001\r\n  $input-length: 48px;\r\n  // Can fit # + 8 letters\r\n  $input-hex-length: 80px;\r\n\r\n  .nuu-color-input {\r\n    display: grid;\r\n    grid-gap: 6px;\r\n  }\r\n\r\n  .color-group {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .input-group {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    &+.input-group {\r\n      margin-left: 4px;\r\n    }\r\n  }\r\n\r\n  .label-text {\r\n    display: inline-block;\r\n    padding-right: 4px;\r\n    text-align: right;\r\n  }\r\n\r\n  input {\r\n    padding: 1px;\r\n    text-align: right;\r\n    font-family: \"Courier New\";\r\n  }\r\n\r\n  .number-group {\r\n    input {\r\n      width: $input-length;\r\n    }\r\n  }\r\n\r\n  .hex-group {\r\n    input {\r\n      width: $input-hex-length;\r\n    }\r\n  }\r\n\r\n  // Hide the arrows for a number.\r\n  // Source: https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp\r\n  /* Chrome, Safari, Edge, Opera */\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n  input[type=number] {\r\n    -moz-appearance: textfield;\r\n  }\r\n</style>\r\n\r\n<div class=\"nuu-color-input\">\r\n  <div class=\"color-group\">\r\n    <label class=\"input-group number-group\">\r\n      <span class=\"label-text\">H:</span>\r\n      <input value={$hue} on:input={onHueChange} type=\"number\" step=\"1\" min=\"0\" max=\"360\">\r\n    </label>\r\n    <label class=\"input-group number-group\">\r\n      <span class=\"label-text\">S:</span>\r\n      <input value={Math.round($saturation * 100)} on:input={onSaturationChange} type=\"number\" step=\"1\" min=\"0\" max=\"100\">\r\n    </label>\r\n    <label class=\"input-group number-group\">\r\n      <span class=\"label-text\">V:</span>\r\n      <input value={Math.round($value * 100)} on:input={onValueChange} type=\"number\" step=\"1\" min=\"0\" max=\"100\">\r\n    </label>\r\n  </div>\r\n  <div class=\"color-group\">\r\n    <label class=\"input-group number-group\">\r\n      <span class=\"label-text\">R:</span>\r\n      <input value={rgb.red} on:input={onRedChange} type=\"number\" step=\"1\" min=\"0\" max=\"255\">\r\n    </label>\r\n    <label class=\"input-group number-group\">\r\n      <span class=\"label-text\">G:</span>\r\n      <input value={rgb.green} on:input={onGreenChange} type=\"number\" step=\"1\" min=\"0\" max=\"255\">\r\n    </label>\r\n    <label class=\"input-group number-group\">\r\n      <span class=\"label-text\">B:</span>\r\n      <input value={rgb.blue} on:input={onBlueChange} type=\"number\" step=\"1\" min=\"0\" max=\"255\">\r\n    </label>\r\n  </div>\r\n  <div class=\"color-group color-group-alpha-hex\">\r\n    <label class=\"input-group number-group\">\r\n      <span class=\"label-text\">A:</span>\r\n      <input value={$alpha} on:input={onAlphaChange} type=\"number\" step=\"0.01\" min=\"0\" max=\"1\">\r\n    </label>\r\n    <label class=\"input-group hex-group\">\r\n      <span class=\"label-text\">HEX:</span>\r\n      <input value=\"{hex}\" on:input={onHexChange} type=\"text\">\r\n    </label>\r\n  </div>\r\n</div>\r\n","<script lang=\"ts\">\r\n  import { hsvaToCSS } from './helpers/color-space-helpers';\r\n  import { onDestroy, onMount } from 'svelte';\r\n  import { hue, saturation, value, alpha } from './color-selector.store';\r\n  import type { ColorHSVA } from './models/colors/color-hsva';\r\n  import type { Unsubscriber } from 'svelte/store';\r\n  import { drawAlphaBackground } from './helpers/color-picker-helpers';\r\n\r\n  export let oldHSVAColor: ColorHSVA;\r\n  // If oldHSVAColor changes then we want to draw new color! This can be changed if a user confirms their colour selection.\r\n  $: if (oldHSVAColor) { drawColor(oldContext, oldHSVAColor.hue, oldHSVAColor.saturation, oldHSVAColor.value, oldHSVAColor.alpha); };\r\n\r\n  const canvasWidth = 32;\r\n  const canvasHeight = 32;\r\n\r\n  let newCanvas: HTMLCanvasElement | undefined;\r\n  let newContext: CanvasRenderingContext2D | undefined;\r\n\r\n  let oldCanvas: HTMLCanvasElement | undefined;\r\n  let oldContext: CanvasRenderingContext2D | undefined;\r\n\r\n  let subscriptions: Unsubscriber[] = [];\r\n\r\n  onMount(() => {\r\n    newContext = newCanvas.getContext('2d');\r\n    oldContext = oldCanvas.getContext('2d');\r\n    // Set the color to the input color.\r\n    resetColor();\r\n    drawColor(newContext, $hue, $saturation, $value, $alpha);\r\n\r\n    subscriptions.push(\r\n      hue.subscribe((h) => {\r\n        drawColor(newContext, h, $saturation, $value, $alpha);\r\n      }),\r\n      saturation.subscribe(s => {\r\n        drawColor(newContext, $hue, s, $value, $alpha);\r\n      }),\r\n      value.subscribe(v => {\r\n        drawColor(newContext, $hue, $saturation, v, $alpha);\r\n      }),\r\n      alpha.subscribe(a => {\r\n        drawColor(newContext, $hue, $saturation, $value,a);\r\n      }),\r\n    );\r\n  });\r\n\r\n  onDestroy(() => {\r\n    for (const subscription of subscriptions) {\r\n      subscription();\r\n    }\r\n  });\r\n\r\n  function drawColor(context: CanvasRenderingContext2D, h: number, s: number, v: number, a: number): void {\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    if (a < 1) {\r\n      // Draw alpha background!\r\n      drawAlphaBackground(canvasWidth, canvasHeight, context);\r\n    } else {\r\n      context.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    }\r\n\r\n    const css = hsvaToCSS(h, s, v, a);\r\n    context.fillStyle = css;\r\n    context.fillRect(0, 0, canvasWidth, canvasHeight);\r\n  }\r\n\r\n  function resetColor(): void {\r\n    hue.set(oldHSVAColor.hue);\r\n    saturation.set(oldHSVAColor.saturation);\r\n    value.set(oldHSVAColor.value);\r\n    alpha.set(oldHSVAColor.alpha);\r\n  }\r\n</script>\r\n<style lang=\"scss\">\r\n  $selected-color-height: 32px;\r\n  $selected-color-width: 32px;\r\n\r\n  .nuu-selected-color {\r\n    // This also removes whitespace which adds 4 pixels to the height.\r\n    display: inline-flex;\r\n  }\r\n\r\n  .selected-color-inner-container {\r\n    display: inline-flex;\r\n    border: 1px solid rgba(0, 0, 0, 0.67);\r\n    height: $selected-color-height + 2px;\r\n  }\r\n\r\n  .selected-color {\r\n    display: inline-block;\r\n    width: $selected-color-width;\r\n    height: $selected-color-height;\r\n  }\r\n\r\n  .selected-color-old {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n<div class=\"nuu-selected-color\">\r\n  <div class=\"selected-color-inner-container\">\r\n    <div class=\"selected-color selected-color-new\"><canvas bind:this={newCanvas} width={canvasWidth} height={canvasHeight}></canvas></div>\r\n    <div class=\"selected-color selected-color-old\" on:click={resetColor}><canvas bind:this={oldCanvas} width={canvasWidth} height={canvasHeight}></canvas></div>\r\n  </div>\r\n</div>\r\n\r\n","<script lang=\"ts\">\r\n  import { createEventDispatcher } from 'svelte';\r\n  import type { NuuColorPickerConfirmEvents } from './models/events/nuu-color-picker-confirm-events';\r\n  const dispatch = createEventDispatcher<NuuColorPickerConfirmEvents>();\r\n\r\n  function onCancelClicked(): void {\r\n    dispatch('cancel');\r\n  }\r\n\r\n  function onConfirmClicked(): void {\r\n    dispatch('ok');\r\n  }\r\n</script>\r\n<style lang=\"scss\">\r\n  .nuu-color-confirm {\r\n    display: flex;\r\n    align-items: flex-end;\r\n  }\r\n\r\n  .color-cancel-button {\r\n    display: inline-block;\r\n    padding: 0 4px;\r\n    font-weight: bold;\r\n    font-size: 16pt;\r\n    color: red;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    &:hover {\r\n      color: darkred;\r\n    }\r\n\r\n    &:active {\r\n      color: #ac73bc;\r\n    }\r\n\r\n  }\r\n\r\n  .color-confirm-button {\r\n    display: inline-block;\r\n    padding: 0 4px;\r\n    font-weight: bold;\r\n    font-size: 16pt;\r\n    color: green;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    &:hover {\r\n      color: lime;\r\n    }\r\n\r\n    &:active {\r\n      color: #ac73bc;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"nuu-color-confirm\">\r\n  <div class=\"color-cancel\" on:click={onCancelClicked}><span class=\"color-cancel-button\" title=\"NO!\">✖</span></div>\r\n  <div class=\"color-ok\" on:click={onConfirmClicked}><span class=\"color-confirm-button\" title=\"OK!\">✓</span></div>\r\n</div>\r\n\r\n","<script lang=\"ts\">\r\n  import NuuColorPicker from \"./NuuColorPicker.svelte\";\r\n  import NuuColorInput from \"./NuuColorInput.svelte\";\r\n  import NuuSelectedColor from \"./NuuSelectedColor.svelte\";\r\n  import NuuColorConfirm from \"./NuuColorConfirm.svelte\";\r\n  import { hue, saturation, value, alpha } from './color-selector.store';\r\n  import type { ColorHSVA } from './models/colors/color-hsva';\r\n  import { parseHexToRGBA, parseHSLFromCSS, parseRGBFromCSS } from './helpers/color-parsing';\r\n  import { hsvToRGB, rgbaToHex, rgbToHSV, roundAlpha } from './helpers/color-space-helpers';\r\n  import { createEventDispatcher } from 'svelte';\r\n  import type { NuuColorSelectorEvents } from './models/events/nuu-color-selector-events';\r\n\r\n  const dispatch = createEventDispatcher<NuuColorSelectorEvents>();\r\n\r\n  let oldHSVAColor: ColorHSVA = createDefaultHSVColor();\r\n  export let color: string = '';\r\n  $: color, parseColor();\r\n\r\n  function parseColor(): void {\r\n    let parsedColor: ColorHSVA = createDefaultHSVColor();\r\n    // For example `color` would make the value be true and then color.startsWith would fail.\r\n    if (!color || !color.startsWith) {\r\n      console.log('nuu color picker: could not parse input color.');\r\n      oldHSVAColor = parsedColor;\r\n      return;\r\n    }\r\n\r\n    // Parse the input color!\r\n    if (color.includes('hsl')) {\r\n      // Parse it as HSL!\r\n      parseHSLFromCSS(color, parsedColor);\r\n    } else if (color.includes('rgb')) {\r\n      // Parse it as RGBA\r\n      parseRGBFromCSS(color, parsedColor);\r\n    } else {\r\n      parseHex(color, parsedColor);\r\n    }\r\n\r\n    // It's easier to set alpha first than to fix the event bug that changing hex would update alpha which would unset everything!\r\n    // So if the UI changes that bug needs to be solved.\r\n    alpha.set(parsedColor.alpha);\r\n    hue.set(parsedColor.hue);\r\n    saturation.set(parsedColor.saturation);\r\n    value.set(parsedColor.value);\r\n\r\n    // Without setTimeout the old color isn't updating and instead it gets 360, 1, 1 as the values.\r\n    // I'm guessing that is because of some user error, or Svelte event gone wrong! But probably user error.\r\n    setTimeout(() => {\r\n      oldHSVAColor = parsedColor;\r\n    });\r\n  }\r\n\r\n  function parseHex(color: string, targetColor: ColorHSVA): void {\r\n    // Parse it as HEX!\r\n    const rgba = parseHexToRGBA(color);\r\n    const hsv = rgbToHSV(rgba.red, rgba.green, rgba.blue);\r\n    const a = roundAlpha(rgba.alpha);\r\n    targetColor.hue = hsv.hue;\r\n    targetColor.saturation = hsv.saturation;\r\n    targetColor.value = hsv.value;\r\n    targetColor.alpha = a;\r\n  }\r\n\r\n  function createDefaultHSVColor(): ColorHSVA {\r\n    return {\r\n      hue: 360,\r\n      saturation: 1,\r\n      value: 1,\r\n      alpha: 1,\r\n    };\r\n  }\r\n\r\n  function selectColor(): void {\r\n    oldHSVAColor.hue = $hue;\r\n    oldHSVAColor.saturation = $saturation;\r\n    oldHSVAColor.value = $value;\r\n    oldHSVAColor.alpha = $alpha;\r\n\r\n    const rgb = hsvToRGB($hue, $saturation, $value);\r\n    const hex = rgbaToHex(rgb.red, rgb.green, rgb.blue, $alpha, true);\r\n\r\n    dispatch('colorPicked', hex);\r\n  }\r\n\r\n  function cancelPicking(): void {\r\n\r\n  }\r\n</script>\r\n<style lang=\"scss\">\r\n\r\n  .nuu-color-selector {\r\n    // It's inline so we don't cover 100% of the width.\r\n    display: inline-flex;\r\n    flex-direction: column;\r\n    padding: 6px;\r\n    border: 1px solid #bbb;\r\n    border-radius: 4px;\r\n    box-shadow: 5px 5px 25px 5px rgba(0,0,0,0.2);\r\n  }\r\n\r\n  .color-selector-body {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .color-input-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    // The RGB circle is otherwise on top of the inputs :D\r\n    margin-top: 16px;\r\n  }\r\n\r\n  .color-selector-footer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 4px;\r\n  }\r\n</style>\r\n\r\n<div class=\"nuu-color-selector\">\r\n  <div class=\"color-selector-body\">\r\n    <div class=\"color-picker-container\">\r\n      <NuuColorPicker />\r\n    </div>\r\n    <div class=\"color-input-container\">\r\n      <NuuColorInput />\r\n    </div>\r\n  </div>\r\n  <footer class=\"color-selector-footer\">\r\n    <NuuSelectedColor bind:oldHSVAColor=\"{oldHSVAColor}\" />\r\n    <NuuColorConfirm on:ok={selectColor} on:cancel={cancelPicking} />\r\n  </footer>\r\n</div>\r\n\r\n","<script lang=\"ts\">\r\n  import { createEventDispatcher, onDestroy, onMount } from 'svelte';\r\n  import type { ColorSwatchEvents } from './color-swatch-events';\r\n  import { hsvToRGB, rgbaToHex } from '../color-selector/helpers/color-space-helpers';\r\n\r\n  export let pickedColor: string;\r\n  $: pickedColor, updateCurrentColor();\r\n\r\n  const dispatch = createEventDispatcher<ColorSwatchEvents>();\r\n\r\n  let currentIndex = 0;\r\n  let colors: string[] = [];\r\n  let degrees: number = 0;\r\n  let degreesTimeout: ReturnType<typeof setInterval>;\r\n\r\n  onMount(() => {\r\n    initColors();\r\n    dispatchColorChanged();\r\n\r\n    const degreesPerSecond = 360 / 60;\r\n    // The lazy way of doing a elapsed = now - lastFrame.\r\n    const elapsedTime = 1 / 60;\r\n    degreesTimeout = window.setInterval(() => {\r\n      degrees += degreesPerSecond * elapsedTime;\r\n      if (degrees > 360) {\r\n        degrees -= 360;\r\n      }\r\n    }, 1000 / 60);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    clearInterval(degreesTimeout);\r\n  });\r\n\r\n  function initColors(): void {\r\n    const totalColors = 21;\r\n    let result: string[] = [];\r\n\r\n    const randomHSV = {\r\n      hue: Math.round(Math.random() * 360),\r\n        saturation: Math.random(),\r\n      value: Math.random(),\r\n    };\r\n    const rgb = hsvToRGB(randomHSV.hue, randomHSV.saturation, randomHSV.value);\r\n    const hex = rgbaToHex(rgb.red, rgb.green, rgb.blue, 1, true)\r\n    result.push(hex);\r\n\r\n    for (let i = 0; i < totalColors - 1; i++) {\r\n      // Add a lot of white colours!\r\n      result.push(\"\");\r\n    }\r\n\r\n    colors = result;\r\n  }\r\n\r\n  function setActive(event: PointerEvent): void {\r\n    const target = event.target as HTMLElement;\r\n    const index = parseInt(target.dataset['index'], 10);\r\n    currentIndex = index;\r\n\r\n    // Only dispatch the event if we have an actual color.\r\n    // This is to that the colors can be empty slots and you can change to them without affecting the \"current color\" in the picker.\r\n    if (colors[currentIndex]) {\r\n      dispatchColorChanged();\r\n    }\r\n  }\r\n\r\n  function dispatchColorChanged(): void {\r\n    const color = colors[currentIndex];\r\n    dispatch('colorChanged', {\r\n      color,\r\n    });\r\n  }\r\n\r\n  function updateCurrentColor(): void {\r\n    const currentColor = colors[currentIndex];\r\n    // This can happen while components are initializing.\r\n    if (typeof currentColor === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    colors[currentIndex] = pickedColor;\r\n    // Reset the picked color so it can be set the same value since Svelte doesn't like to emit same event.\r\n    pickedColor = \"\";\r\n  }\r\n</script>\r\n<style lang=\"scss\">\r\n  $hover-rgb-strength: 192;\r\n  $active-rgb-strength: 255;\r\n\r\n  .color-swatch {\r\n    display: grid;\r\n    grid-template-columns: repeat(7, 32px);\r\n    grid-gap: 4px;\r\n  }\r\n\r\n  .color-swatch-item {\r\n    display: inline-block;\r\n    width: 32px;\r\n    height: 32px;\r\n    border-width: 2px;\r\n    border-style: solid;\r\n    border-image-slice: 1;\r\n\r\n    border-image-source: linear-gradient(var(--degrees), #badbad, #88308e);\r\n    cursor: pointer;\r\n\r\n    &:not(.active):hover {\r\n      border-image-source: linear-gradient(var(--degrees), rgb($hover-rgb-strength, 0, 0) 0%, rgb($hover-rgb-strength, 0, $hover-rgb-strength) 16.67%, rgb(0, 0, $hover-rgb-strength) 33.33%, rgb(0, $hover-rgb-strength, $hover-rgb-strength) 50%, rgb(0, $hover-rgb-strength, 0) 66.67%, rgb($hover-rgb-strength, $hover-rgb-strength, 0) 83.33%, rgb($hover-rgb-strength, 0, 0) 100%);\r\n    }\r\n\r\n    &:not(.active):active {\r\n      border-image-source: linear-gradient(var(--degrees), rgb($active-rgb-strength, 0, 0) 0%, rgb($active-rgb-strength, 0, $active-rgb-strength) 16.67%, rgb(0, 0, $active-rgb-strength) 33.33%, rgb(0, $active-rgb-strength, $active-rgb-strength) 50%, rgb(0, $active-rgb-strength, 0) 66.67%, rgb($active-rgb-strength, $active-rgb-strength, 0) 83.33%, rgb($active-rgb-strength, 0, 0) 100%);\r\n    }\r\n  }\r\n\r\n  .active {\r\n    // Super flashy rainbow border!\r\n    border-image-source: linear-gradient(var(--degrees), rgb(255, 0, 0) 0%, rgb(255, 0, 255) 16.67%, rgb(0, 0, 255) 33.33%, rgb(0, 255, 255) 50%, rgb(0, 255, 0) 66.67%, rgb(255, 255, 0) 83.33%, rgb(255, 0, 0) 100%);\r\n  }\r\n\r\n</style>\r\n\r\n<div class=\"color-swatch\" style=\"--degrees: {degrees}deg;\">\r\n  {#each colors as color, i}\r\n    <div\r\n      class=\"color-swatch-item\"\r\n      class:active={i === currentIndex}\r\n      style=\"background-color: {color};\"\r\n      data-index={i}\r\n      on:click={setActive}\r\n    ></div>\r\n  {/each}\r\n</div>\r\n","<script lang=\"ts\">\r\n  import ColorSelector from './color-selector/NuuColorSelector.svelte';\r\n  import { isDraggingColor } from './color-selector/color-selector.store';\r\n  import type { ColorSwatchColorChangedEvent } from './color-swatch/color-swatch-events';\r\n  import ColorSwatch from \"./color-swatch/ColorSwatch.svelte\";\r\n  import type { NuuColorSelectorEvents } from './color-selector/models/events/nuu-color-selector-events';\r\n\r\n  isDraggingColor.subscribe((value) => {\r\n    if (value) {\r\n      document.body.classList.add('user-select-none');\r\n    } else {\r\n      document.body.classList.remove('user-select-none');\r\n    }\r\n  });\r\n\r\n  let currentColor: string = '';\r\n  let pickedColor: string = '';\r\n\r\n  function onColorPicked(event: CustomEvent<NuuColorSelectorEvents>): void {\r\n    pickedColor = event.detail as string;\r\n  }\r\n\r\n  function onColorChanged(event: CustomEvent<ColorSwatchColorChangedEvent>): void {\r\n    console.log('color changed', event.detail.color);\r\n    currentColor = event.detail.color;\r\n  }\r\n</script>\r\n<style>\r\n.color-swatch-wrapper {\r\n  margin-top: 12px;\r\n}\r\n</style>\r\n\r\n<main>\r\n  <div class=\"color-picker-wrapper\">\r\n    <ColorSelector bind:color={currentColor} on:colorPicked={onColorPicked} />\r\n  </div>\r\n  <div class=\"color-swatch-wrapper\">\r\n    <ColorSwatch on:colorChanged={onColorChanged} bind:pickedColor={pickedColor}></ColorSwatch>\r\n  </div>\r\n</main>\r\n\r\n\r\n","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body,\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","space","data","createTextNode","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","onMount","on_mount","onDestroy","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","bind","index","props","undefined","bound","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","parent_component","on_disconnect","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","indexOf","splice","$$props","obj","$$set","keys","drawHSVBlock","color","canvas","gradients","width","height","fillStyle","fillRect","xGradient","yGradient","hsvaToRGBAToCSS","hue","saturation","alpha","rgb","hsvToRGB","red","green","blue","rgbaToCSS","hsvaToCSS","hsl","lightness","sl","Math","min","hsvToHSL","round","getViewHSL","rgbaToHex","truncateWhenFullAlpha","floor","hex","componentToHex","rgbToHex","toString","rgbToHSV","r","g","max","chroma","deltaHue","x","abs","roundAlpha","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","s","invalidate","subscriber","ColorSelectionMode","HSV","isDraggingColor","interactingCounts","addDragging","removeDragging","console","log","createIsDraggingColor","clamp","svCanvasSize","rgbCanvasWidth","svCanvas","svContext","svGradients","svIndicator","rgbCanvas","rgbPointyIndicator","svPointerDown","rgbPointerDown","subscriptions","tempSaturationBlocker","onPointerMove","onSVPointerMove","onRGBPointerMove","onPointerUp","onPointerLeave","bounds","getBoundingClientRect","clientX","left","offsetWidth","y","clientY","top","offsetHeight","v","$value","h","getSVIndicatorTransform","window","getContext","whiteGradient","createLinearGradient","addColorStop","blackGradient","createHSVGradients","gradient","drawRGBStrip","$hue","rgba","rgbIndicatorTop","transform","backgroundColor","$saturation","subscription","parseAlpha","parseFloat","isNaN","parseHSLFromCSS","targetColor","result","match","hsv","sv","hslToHSV","parseInt","getHexValuesRegex","parseHexToRGBA","test","substring","extractHex","r1","r2","g1","g2","b1","b2","a1","a2","getAndSetRoundedInputValue","blockRGBHexUpdate","updateHSV","oldHue","updateRGBAndHex","updateHex","$alpha","clampInput","isFinite","clampedValue","canvasWidth","canvasHeight","newCanvas","newContext","oldCanvas","oldContext","oldHSVAColor","drawColor","size","drawAlphaBackground","clearRect","css","resetColor","dispatch","cancelPicking","parseColor","parsedColor","startsWith","includes","parseRGBFromCSS","parseHex","setTimeout","iterations","pickedColor","degreesTimeout","currentIndex","colors","degrees","dispatchColorChanged","totalColors","randomHSV","random","initColors","setInterval","degreesPerSecond","clearInterval","dataset","body","remove","currentColor"],"mappings":"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"}